# coding: utf-8

"""
    Kubeflow Pipelines API

    This file contains REST API specification for Kubeflow Pipelines. The file is autogenerated from the swagger definition.

    Contact: kubeflow-pipelines@google.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kfp_server_api.configuration import Configuration


class V2beta1Artifact(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'artifact_id': 'str',
        'storage_provider': 'str',
        'storage_path': 'str',
        'uri': 'str',
        'download_url': 'str',
        'namespace': 'str',
        'artifact_type': 'str',
        'artifact_size': 'str',
        'created_at': 'datetime',
        'last_updated_at': 'datetime',
        'error': 'GooglerpcStatus',
        'render_url': 'str'
    }

    attribute_map = {
        'artifact_id': 'artifact_id',
        'storage_provider': 'storage_provider',
        'storage_path': 'storage_path',
        'uri': 'uri',
        'download_url': 'download_url',
        'namespace': 'namespace',
        'artifact_type': 'artifact_type',
        'artifact_size': 'artifact_size',
        'created_at': 'created_at',
        'last_updated_at': 'last_updated_at',
        'error': 'error',
        'render_url': 'render_url'
    }

    def __init__(self, artifact_id=None, storage_provider=None, storage_path=None, uri=None, download_url=None, namespace=None, artifact_type=None, artifact_size=None, created_at=None, last_updated_at=None, error=None, render_url=None, local_vars_configuration=None):  # noqa: E501
        """V2beta1Artifact - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._artifact_id = None
        self._storage_provider = None
        self._storage_path = None
        self._uri = None
        self._download_url = None
        self._namespace = None
        self._artifact_type = None
        self._artifact_size = None
        self._created_at = None
        self._last_updated_at = None
        self._error = None
        self._render_url = None
        self.discriminator = None

        if artifact_id is not None:
            self.artifact_id = artifact_id
        if storage_provider is not None:
            self.storage_provider = storage_provider
        if storage_path is not None:
            self.storage_path = storage_path
        if uri is not None:
            self.uri = uri
        if download_url is not None:
            self.download_url = download_url
        if namespace is not None:
            self.namespace = namespace
        if artifact_type is not None:
            self.artifact_type = artifact_type
        if artifact_size is not None:
            self.artifact_size = artifact_size
        if created_at is not None:
            self.created_at = created_at
        if last_updated_at is not None:
            self.last_updated_at = last_updated_at
        if error is not None:
            self.error = error
        if render_url is not None:
            self.render_url = render_url

    @property
    def artifact_id(self):
        """Gets the artifact_id of this V2beta1Artifact.  # noqa: E501

        Unique Artifact ID. Generated by MLMD.  # noqa: E501

        :return: The artifact_id of this V2beta1Artifact.  # noqa: E501
        :rtype: str
        """
        return self._artifact_id

    @artifact_id.setter
    def artifact_id(self, artifact_id):
        """Sets the artifact_id of this V2beta1Artifact.

        Unique Artifact ID. Generated by MLMD.  # noqa: E501

        :param artifact_id: The artifact_id of this V2beta1Artifact.  # noqa: E501
        :type artifact_id: str
        """

        self._artifact_id = artifact_id

    @property
    def storage_provider(self):
        """Gets the storage_provider of this V2beta1Artifact.  # noqa: E501

        Storage Provider to which this Artifact is located (e.g. S3, Minio, etc.).  # noqa: E501

        :return: The storage_provider of this V2beta1Artifact.  # noqa: E501
        :rtype: str
        """
        return self._storage_provider

    @storage_provider.setter
    def storage_provider(self, storage_provider):
        """Sets the storage_provider of this V2beta1Artifact.

        Storage Provider to which this Artifact is located (e.g. S3, Minio, etc.).  # noqa: E501

        :param storage_provider: The storage_provider of this V2beta1Artifact.  # noqa: E501
        :type storage_provider: str
        """

        self._storage_provider = storage_provider

    @property
    def storage_path(self):
        """Gets the storage_path of this V2beta1Artifact.  # noqa: E501

        The path location of this Artifact within the storage provider. For example an object located at s3://my-bucket/path/a/b/c will result in \"path/a/b/c\".  # noqa: E501

        :return: The storage_path of this V2beta1Artifact.  # noqa: E501
        :rtype: str
        """
        return self._storage_path

    @storage_path.setter
    def storage_path(self, storage_path):
        """Sets the storage_path of this V2beta1Artifact.

        The path location of this Artifact within the storage provider. For example an object located at s3://my-bucket/path/a/b/c will result in \"path/a/b/c\".  # noqa: E501

        :param storage_path: The storage_path of this V2beta1Artifact.  # noqa: E501
        :type storage_path: str
        """

        self._storage_path = storage_path

    @property
    def uri(self):
        """Gets the uri of this V2beta1Artifact.  # noqa: E501


        :return: The uri of this V2beta1Artifact.  # noqa: E501
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this V2beta1Artifact.


        :param uri: The uri of this V2beta1Artifact.  # noqa: E501
        :type uri: str
        """

        self._uri = uri

    @property
    def download_url(self):
        """Gets the download_url of this V2beta1Artifact.  # noqa: E501

        Optional Output. Specifies a signed-url that can be used to download this Artifact directly from its store.  # noqa: E501

        :return: The download_url of this V2beta1Artifact.  # noqa: E501
        :rtype: str
        """
        return self._download_url

    @download_url.setter
    def download_url(self, download_url):
        """Sets the download_url of this V2beta1Artifact.

        Optional Output. Specifies a signed-url that can be used to download this Artifact directly from its store.  # noqa: E501

        :param download_url: The download_url of this V2beta1Artifact.  # noqa: E501
        :type download_url: str
        """

        self._download_url = download_url

    @property
    def namespace(self):
        """Gets the namespace of this V2beta1Artifact.  # noqa: E501

        The namespace associated with this Artifact. This is determined by the namespace of the parent PipelineRun that created this Artifact.  # noqa: E501

        :return: The namespace of this V2beta1Artifact.  # noqa: E501
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this V2beta1Artifact.

        The namespace associated with this Artifact. This is determined by the namespace of the parent PipelineRun that created this Artifact.  # noqa: E501

        :param namespace: The namespace of this V2beta1Artifact.  # noqa: E501
        :type namespace: str
        """

        self._namespace = namespace

    @property
    def artifact_type(self):
        """Gets the artifact_type of this V2beta1Artifact.  # noqa: E501


        :return: The artifact_type of this V2beta1Artifact.  # noqa: E501
        :rtype: str
        """
        return self._artifact_type

    @artifact_type.setter
    def artifact_type(self, artifact_type):
        """Sets the artifact_type of this V2beta1Artifact.


        :param artifact_type: The artifact_type of this V2beta1Artifact.  # noqa: E501
        :type artifact_type: str
        """

        self._artifact_type = artifact_type

    @property
    def artifact_size(self):
        """Gets the artifact_size of this V2beta1Artifact.  # noqa: E501

        The size of the artifact in bytes. If the artifact does not exist in object store (e.g. Metrics) then this is omitted.  # noqa: E501

        :return: The artifact_size of this V2beta1Artifact.  # noqa: E501
        :rtype: str
        """
        return self._artifact_size

    @artifact_size.setter
    def artifact_size(self, artifact_size):
        """Sets the artifact_size of this V2beta1Artifact.

        The size of the artifact in bytes. If the artifact does not exist in object store (e.g. Metrics) then this is omitted.  # noqa: E501

        :param artifact_size: The artifact_size of this V2beta1Artifact.  # noqa: E501
        :type artifact_size: str
        """

        self._artifact_size = artifact_size

    @property
    def created_at(self):
        """Gets the created_at of this V2beta1Artifact.  # noqa: E501

        Creation time of the artifact.  # noqa: E501

        :return: The created_at of this V2beta1Artifact.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this V2beta1Artifact.

        Creation time of the artifact.  # noqa: E501

        :param created_at: The created_at of this V2beta1Artifact.  # noqa: E501
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def last_updated_at(self):
        """Gets the last_updated_at of this V2beta1Artifact.  # noqa: E501

        Last update time of the artifact.  # noqa: E501

        :return: The last_updated_at of this V2beta1Artifact.  # noqa: E501
        :rtype: datetime
        """
        return self._last_updated_at

    @last_updated_at.setter
    def last_updated_at(self, last_updated_at):
        """Sets the last_updated_at of this V2beta1Artifact.

        Last update time of the artifact.  # noqa: E501

        :param last_updated_at: The last_updated_at of this V2beta1Artifact.  # noqa: E501
        :type last_updated_at: datetime
        """

        self._last_updated_at = last_updated_at

    @property
    def error(self):
        """Gets the error of this V2beta1Artifact.  # noqa: E501


        :return: The error of this V2beta1Artifact.  # noqa: E501
        :rtype: GooglerpcStatus
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this V2beta1Artifact.


        :param error: The error of this V2beta1Artifact.  # noqa: E501
        :type error: GooglerpcStatus
        """

        self._error = error

    @property
    def render_url(self):
        """Gets the render_url of this V2beta1Artifact.  # noqa: E501

        Optional Output. Specifies a signed URL that can be used to render this Artifact directly from its store.  # noqa: E501

        :return: The render_url of this V2beta1Artifact.  # noqa: E501
        :rtype: str
        """
        return self._render_url

    @render_url.setter
    def render_url(self, render_url):
        """Sets the render_url of this V2beta1Artifact.

        Optional Output. Specifies a signed URL that can be used to render this Artifact directly from its store.  # noqa: E501

        :param render_url: The render_url of this V2beta1Artifact.  # noqa: E501
        :type render_url: str
        """

        self._render_url = render_url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V2beta1Artifact):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V2beta1Artifact):
            return True

        return self.to_dict() != other.to_dict()
