# coding: utf-8

"""
    Kubeflow Pipelines API

    This file contains REST API specification for Kubeflow Pipelines. The file is autogenerated from the swagger definition.

    Contact: kubeflow-pipelines@google.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from kfp_server_api.api_client import ApiClient
from kfp_server_api.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class ArtifactServiceApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def artifact_service_get_artifact(self, artifact_id, **kwargs):  # noqa: E501
        """Finds a specific Artifact by ID.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.artifact_service_get_artifact(artifact_id, async_req=True)
        >>> result = thread.get()

        :param artifact_id: Required. The ID of the artifact to be retrieved. (required)
        :type artifact_id: str
        :param view: Optional. Set to \"DOWNLOAD\" to included a signed URL with an expiry (default 15 seconds, unless configured other wise). This URL can be used to download the Artifact directly from the Artifact's storage provider. Set to \"BASIC\" to exclude the download_url from server responses, thus preventing the creation of any signed url. Defaults to BASIC.   - ARTIFACT_VIEW_UNSPECIFIED: Not specified, equivalent to BASIC.  - BASIC: Server responses excludes download_url  - DOWNLOAD: Server responses include download_url  - RENDER: Server response includes a signed URL, allowing in-browser rendering or preview of the artifact.
        :type view: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: V2beta1Artifact
        """
        kwargs['_return_http_data_only'] = True
        return self.artifact_service_get_artifact_with_http_info(artifact_id, **kwargs)  # noqa: E501

    def artifact_service_get_artifact_with_http_info(self, artifact_id, **kwargs):  # noqa: E501
        """Finds a specific Artifact by ID.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.artifact_service_get_artifact_with_http_info(artifact_id, async_req=True)
        >>> result = thread.get()

        :param artifact_id: Required. The ID of the artifact to be retrieved. (required)
        :type artifact_id: str
        :param view: Optional. Set to \"DOWNLOAD\" to included a signed URL with an expiry (default 15 seconds, unless configured other wise). This URL can be used to download the Artifact directly from the Artifact's storage provider. Set to \"BASIC\" to exclude the download_url from server responses, thus preventing the creation of any signed url. Defaults to BASIC.   - ARTIFACT_VIEW_UNSPECIFIED: Not specified, equivalent to BASIC.  - BASIC: Server responses excludes download_url  - DOWNLOAD: Server responses include download_url  - RENDER: Server response includes a signed URL, allowing in-browser rendering or preview of the artifact.
        :type view: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(V2beta1Artifact, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'artifact_id',
            'view'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method artifact_service_get_artifact" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'artifact_id' is set
        if self.api_client.client_side_validation and ('artifact_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['artifact_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `artifact_id` when calling `artifact_service_get_artifact`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'artifact_id' in local_var_params:
            path_params['artifact_id'] = local_var_params['artifact_id']  # noqa: E501

        query_params = []
        if 'view' in local_var_params and local_var_params['view'] is not None:  # noqa: E501
            query_params.append(('view', local_var_params['view']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/apis/v2beta1/artifacts/{artifact_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V2beta1Artifact',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def artifact_service_list_artifacts(self, **kwargs):  # noqa: E501
        """Finds all artifacts within the specified namespace. Namespace field is required. In multi-user mode, the caller is required to have RBAC verb \"list\" on the \"artifacts\" resource for the specified namespace.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.artifact_service_list_artifacts(async_req=True)
        >>> result = thread.get()

        :param max_result_size: Optional. Max number of resources to return in the result. A value of zero or less will result in the default (20). The API implementation also enforces an upper-bound of 100, and picks the minimum between this value and the one specified here. [default = 20]
        :type max_result_size: int
        :param order_by_field: Optional. Ordering field. [default = ID]
        :type order_by_field: str
        :param order_by: Optional. Can be either \"asc\" (ascending) or \"desc\" (descending). [default = asc]
        :type order_by: str
        :param next_page_token: Optional. The next_page_token value returned from a previous List request, if any.
        :type next_page_token: str
        :param namespace: Required. Namespace of the Artifact's context.
        :type namespace: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: V2beta1ListArtifactResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.artifact_service_list_artifacts_with_http_info(**kwargs)  # noqa: E501

    def artifact_service_list_artifacts_with_http_info(self, **kwargs):  # noqa: E501
        """Finds all artifacts within the specified namespace. Namespace field is required. In multi-user mode, the caller is required to have RBAC verb \"list\" on the \"artifacts\" resource for the specified namespace.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.artifact_service_list_artifacts_with_http_info(async_req=True)
        >>> result = thread.get()

        :param max_result_size: Optional. Max number of resources to return in the result. A value of zero or less will result in the default (20). The API implementation also enforces an upper-bound of 100, and picks the minimum between this value and the one specified here. [default = 20]
        :type max_result_size: int
        :param order_by_field: Optional. Ordering field. [default = ID]
        :type order_by_field: str
        :param order_by: Optional. Can be either \"asc\" (ascending) or \"desc\" (descending). [default = asc]
        :type order_by: str
        :param next_page_token: Optional. The next_page_token value returned from a previous List request, if any.
        :type next_page_token: str
        :param namespace: Required. Namespace of the Artifact's context.
        :type namespace: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(V2beta1ListArtifactResponse, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'max_result_size',
            'order_by_field',
            'order_by',
            'next_page_token',
            'namespace'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method artifact_service_list_artifacts" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'max_result_size' in local_var_params and local_var_params['max_result_size'] is not None:  # noqa: E501
            query_params.append(('max_result_size', local_var_params['max_result_size']))  # noqa: E501
        if 'order_by_field' in local_var_params and local_var_params['order_by_field'] is not None:  # noqa: E501
            query_params.append(('order_by_field', local_var_params['order_by_field']))  # noqa: E501
        if 'order_by' in local_var_params and local_var_params['order_by'] is not None:  # noqa: E501
            query_params.append(('order_by', local_var_params['order_by']))  # noqa: E501
        if 'next_page_token' in local_var_params and local_var_params['next_page_token'] is not None:  # noqa: E501
            query_params.append(('next_page_token', local_var_params['next_page_token']))  # noqa: E501
        if 'namespace' in local_var_params and local_var_params['namespace'] is not None:  # noqa: E501
            query_params.append(('namespace', local_var_params['namespace']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/apis/v2beta1/artifacts', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V2beta1ListArtifactResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
